{"version":3,"sources":["db/DBManager.js","common/jsTPS.js","transactions/MoveSong_Transaction.js","transactions/AddSong_Transaction.js","transactions/DeleteSong_Transaction.js","transactions/EditSong_Transaction.js","components/DeleteListModal.js","components/DeleteSongModal.js","components/EditSongModal.js","components/Banner.js","components/EditToolbar.js","components/SongCard.js","components/PlaylistCards.js","components/SidebarHeading.js","components/ListCard.js","components/SidebarList.js","components/Statusbar.js","App.js","reportWebVitals.js","index.js"],"names":["DBManager","queryGetSessionData","sessionDataString","localStorage","getItem","JSON","parse","queryIsList","key","queryGetList","listString","mutationCreateList","list","_this","mutationUpdateList","stringify","setItem","mutationUpdateSessionData","sessionData","mutationDeleteList","removeItem","jsTPS","Object","classCallCheck","this","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","length","getSize","transaction","i","splice","doTransaction","hasTransactionToRedo","hasTransactionToUndo","undoTransaction","text","toString","MoveSong_Transaction","initApp","initOldSongIndex","initNewSongIndex","possibleConstructorReturn","getPrototypeOf","call","app","oldSongIndex","newSongIndex","moveSong","jsTPS_Transaction","AddSong_Transaction","addSong","deleteSong","getPlaylistSize","DeleteSong_Transaction","deleteIndex","s","a","y","editSong","EditSong_Transaction","editIndex","t","oldT","oldA","oldY","getEditSongIndex","DeleteListModal","_this$props","props","listKeyPair","deleteListCallback","hideDeleteListModalCallback","name","react_default","createElement","class","id","data-animation","type","onClick","value","Component","deleteSongCallback","hideDeleteSongModalCallback","title","EditSongModal","editSongCallback","hideEditSongModalCallback","artist","youTubeId","for","Banner","React","EditToolbar","canAddSong","canUndo","canRedo","canClose","addCallback","undoCallback","redoCallback","closeCallback","addSongClass","undoClass","redoClass","closeClass","className","SongCard","handleDragStart","event","dataTransfer","setData","target","setState","prevState","isDragging","draggedTo","handleDragOver","preventDefault","handleDragEnter","handleDragLeave","handleDrop","targetId","substring","indexOf","sourceId","getData","moveCallback","handleDeleteSong","stopPropagation","keyNamePair","handleEditSong","getItemNum","state","song","link","num","console","log","onDragStart","onDragOver","onDragEnter","onDragLeave","onDrop","onDoubleClick","draggable","href","PlaylistCards","currentList","moveSongCallback","songs","map","index","SongCard_SongCard","SidebarHeading","handleClick","createNewListCallback","ListCard","detail","handleLoadList","handleToggleEdit","listKey","startsWith","loadListCallback","handleDeleteList","editActive","handleUpdate","handleKeyPress","code","handleBlur","textValue","renameListCallback","selected","onKeyPress","onBlur","onChange","defaultValue","selectClass","SidebarList","keyNamePairs","pair","ListCard_ListCard","Statusbar","App","sortKeyNamePairsByName","sort","keyPair1","keyPair2","localeCompare","createNewList","newKey","nextKey","newName","newList","newKeyNamePair","updatedPairs","concat","toConsumableArray","listKeyPairMarkedForDeletion","counter","db","deleteList","newCurrentList","keyIndex","findIndex","newKeyNamePairs","deleteMarkedList","hideDeleteListModal","deleteCurrentList","renameList","loadList","tps","clearAllTransactions","closeCurrentList","addMoveSongTransaction","start","end","assertThisInitialized","addTransaction","push","setStateWithUpdatedList","addAddSongTransaction","addDeleteSongTransaction","d","newTitle","newArtist","newYoutubeId","addEditSongTransaction","undo","redo","markListForDeletion","keyPair","showDeleteListModal","markSongForDeletion","showDeleteSongModal","markSongForEdit","showEditSongModal","loadedSessionData","_this2","temp","document","getElementById","classList","add","remove","Banner_Banner","SidebarHeading_SidebarHeading","SidebarList_SidebarList","EditToolbar_EditToolbar","PlaylistCards_PlaylistCards","Statusbar_Statusbar","DeleteListModal_DeleteListModal","DeleteSongModal_DeleteListModal","hideDeleteSongModal","EditSongModal_EditSongModal","hideEditSongModal","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","launch","ReactDOM","render","StrictMode","src_App_0","jsonFilePath","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","lists","playlists","listData","open","send","loadListsFromJSON"],"mappings":"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","file":"static/js/main.c7b82717.chunk.js","sourcesContent":["export default class DBManager {\n    // QUERY AND MUTATION FUNCTIONS GET/SET DATA FROM/TO\n    // AN EXTERNAL SOURCE, WHICH FOR THIS APPLICATION\n    // MEANS THE BROWSER'S LOCAL STORAGE\n    queryGetSessionData = () => {\n        let sessionDataString = localStorage.getItem(\"playlister-data\");\n        return JSON.parse(sessionDataString);\n    }\n\n    queryIsList = (key) => {\n        let list = localStorage.getItem(\"playlister-list-\" + key);\n        return list != null;\n    }\n\n    /**\n     * This query asks local storage for a list with a particular key,\n     * which is then returned by this function.\n     */\n    queryGetList = (key) => {\n        let listString = localStorage.getItem(\"playlister-list-\" + key);\n        return JSON.parse(listString);\n    }\n\n    mutationCreateList = (list) => {\n        this.mutationUpdateList(list);\n    }\n\n    mutationUpdateList = (list) => {\n        // AND FLOW THOSE CHANGES TO LOCAL STORAGE\n        let listString = JSON.stringify(list);\n        localStorage.setItem(\"playlister-list-\" + list.key, listString);\n    }\n    \n    mutationUpdateSessionData = (sessionData) => {\n        let sessionDataString = JSON.stringify(sessionData);\n        localStorage.setItem(\"playlister-data\", sessionDataString);\n    }\n\n    mutationDeleteList = (key) => {\n        if (this.queryIsList(key))\n            localStorage.removeItem(\"playlister-list-\" + key);\n    }\n}","/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\n/**\n * MoveSong_Transaction\n * \n * This class represents a transaction that works with drag\n * and drop. It will be managed by the transaction stack.\n * \n * @author McKilla Gorilla\n * @author ?\n */\nexport default class MoveSong_Transaction extends jsTPS_Transaction {\n    constructor(initApp, initOldSongIndex, initNewSongIndex) {\n        super();\n        this.app = initApp;\n        this.oldSongIndex = initOldSongIndex;\n        this.newSongIndex = initNewSongIndex;\n    }\n\n    doTransaction() {\n        this.app.moveSong(this.oldSongIndex, this.newSongIndex);\n    }\n    \n    undoTransaction() {\n        this.app.moveSong(this.newSongIndex, this.oldSongIndex);\n    }\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\r\n\r\nexport default class AddSong_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp) {\r\n        super();\r\n        this.app = initApp;\r\n    }\r\n\r\n    doTransaction() {\r\n        this.app.addSong();\r\n    }\r\n    \r\n    undoTransaction() {\r\n        this.app.deleteSong(this.app.getPlaylistSize() - 1);\r\n    }\r\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\r\n\r\nexport default class DeleteSong_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp, deleteIndex, s, a, y) {\r\n        super();\r\n        this.app = initApp;\r\n        this.deleteIndex = deleteIndex;\r\n        this.s = s;\r\n        this.a = a;\r\n        this.y = y;\r\n\r\n    }\r\n\r\n    doTransaction() {\r\n        this.app.deleteSong(this.deleteIndex);\r\n    }\r\n    \r\n    undoTransaction() {\r\n        this.app.addSong();\r\n        this.app.editSong(this.app.getPlaylistSize()-1, this.s, this.a, this.y);\r\n        this.app.moveSong(this.app.getPlaylistSize()-1, this.deleteIndex);\r\n    }\r\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\r\n\r\nexport default class EditSong_Transaction extends jsTPS_Transaction {\r\n    constructor(initApp, editIndex, t, a, y, oldT, oldA, oldY) {\r\n        super();\r\n        this.app = initApp;\r\n        this.editIndex = editIndex;\r\n        this.t = t;\r\n        this.a = a;\r\n        this.y = y;\r\n        this.oldT = oldT;\r\n        this.oldA = oldA;\r\n        this.oldY = oldY;\r\n\r\n    }\r\n\r\n    doTransaction() {\r\n        this.app.editSong(this.app.getEditSongIndex(), this.t, this.a, this.y);\r\n    }\r\n    \r\n    undoTransaction() {\r\n        this.app.editSong(this.app.getEditSongIndex(), this.oldT, this.oldA, this.oldY);\r\n    }\r\n}","import React, { Component } from 'react';\n\nexport default class DeleteListModal extends Component {\n    render() {\n        const { listKeyPair, deleteListCallback, hideDeleteListModalCallback } = this.props;\n        let name = \"\";\n        if (listKeyPair) {\n            name = listKeyPair.name;\n        }\n        return (\n            <div \n                class=\"modal\" \n                id=\"delete-list-modal\" \n                data-animation=\"slideInOutLeft\">\n                    <div class=\"modal-root\" id='verify-delete-list-root'>\n                        <div class=\"modal-north\">\n                            Delete playlist?\n                        </div>\n                        <div class=\"modal-center\">\n                            <div class=\"modal-center-content\">\n                                Are you sure you wish to permanently delete the {name} playlist?\n                            </div>\n                        </div>\n                        <div class=\"modal-south\">\n                            <input type=\"button\" \n                                id=\"delete-list-confirm-button\" \n                                class=\"modal-button\" \n                                onClick={deleteListCallback}\n                                value='Confirm' />\n                            <input type=\"button\" \n                                id=\"delete-list-cancel-button\" \n                                class=\"modal-button\" \n                                onClick={hideDeleteListModalCallback}\n                                value='Cancel' />\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\r\n\r\nexport default class DeleteListModal extends Component {\r\n    render() {\r\n        const {listKeyPair, deleteSongCallback, hideDeleteSongModalCallback} = this.props;\r\n        let name = \"\";\r\n        if (listKeyPair){\r\n            name = listKeyPair.title;\r\n        }\r\n        return (\r\n            <div \r\n                class=\"modal\" \r\n                id=\"delete-song-modal\" \r\n                data-animation=\"slideInOutLeft\">\r\n                    <div class=\"modal-root\" id='verify-delete-song-root'>\r\n                        <div class=\"modal-north\">\r\n                            Remove Song?\r\n                        </div>\r\n                        <div class=\"modal-center\">\r\n                            <div class=\"modal-center-content\">\r\n                                Are you sure you wish to permanently remove {name} from the playlist?\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"modal-south\">\r\n                            <input type=\"button\" \r\n                                id=\"delete-song-confirm-button\" \r\n                                class=\"modal-button\" \r\n                                onClick={deleteSongCallback}\r\n                                value='Confirm' />\r\n                            <input type=\"button\" \r\n                                id=\"delete-song-cancel-button\" \r\n                                class=\"modal-button\" \r\n                                onClick={hideDeleteSongModalCallback}\r\n                                value='Cancel' />\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class EditSongModal extends Component {\r\n\r\n    render() {\r\n        const {listKeyPair, editSongCallback, hideEditSongModalCallback} = this.props;\r\n        let t = \"\";\r\n        let a = \"\";\r\n        let y = \"\";\r\n        if (listKeyPair){\r\n            t = listKeyPair.title;\r\n            a = listKeyPair.artist;\r\n            y = listKeyPair.youTubeId;\r\n        }\r\n        return (\r\n            <div \r\n                class=\"modal\" \r\n                id=\"edit-song-modal\" \r\n                data-animation=\"slideInOutLeft\">\r\n                    <div class=\"modal-root\" id='verify-delete-list-root'>\r\n                        <div class=\"modal-north\">\r\n                            Edit a song\r\n                        </div>\r\n                        <div class=\"modal-center\">\r\n                            <div class=\"modal-title-song\">\r\n                                <label for=\"title-song\">Title:</label>\r\n                                <input type=\"text\" id=\"title-song\" name=\"title-song\" value={t}></input>\r\n                            </div>\r\n                            <div class=\"modal-artist-song\">\r\n                                <label for=\"artist-song\">Artist:</label>\r\n                                <input type=\"text\" id=\"artist-song\" name=\"artist-song\" value={a}></input>\r\n                            </div>\r\n                            <div class=\"modal-youtube-song\">\r\n                                <label for=\"youtube-song\">YoutubeId:</label>\r\n                                <input type=\"text\" id=\"youtube-song\" name=\"youtube-song\" value={y}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"modal-south\">\r\n                            <input type=\"button\" \r\n                                id=\"edit-song-confirm-button\" \r\n                                class=\"modal-button\" \r\n                                onClick={editSongCallback}\r\n                                value='Confirm' />\r\n                            <input type=\"button\" \r\n                                id=\"edit-song-cancel-button\" \r\n                                class=\"modal-button\" \r\n                                onClick={hideEditSongModalCallback}\r\n                                value='Cancel' />\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\n\nexport default class Banner extends React.Component {\n    render() {\n        return (\n            <div id=\"banner\">\n                Playlister\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nexport default class EditToolbar extends React.Component {\n    render() {\n        const { canAddSong, canUndo, canRedo, canClose, \n                addCallback, undoCallback, redoCallback, closeCallback} = this.props;\n        let addSongClass = \"toolbar-button\";\n        let undoClass = \"toolbar-button\";\n        let redoClass = \"toolbar-button\";\n        let closeClass = \"toolbar-button\";\n        if (canAddSong) addSongClass += \" disabled\";\n        if (canUndo) undoClass += \" disabled\";\n        if (canRedo) redoClass += \" disabled\";\n        if (canClose) closeClass += \" disabled\";\n        return (\n            <div id=\"edit-toolbar\">\n            <input \n                type=\"button\" \n                id='add-song-button' \n                value=\"+\" \n                className={addSongClass}\n                onClick={addCallback}\n            />\n            <input \n                type=\"button\" \n                id='undo-button' \n                value=\"⟲\" \n                className={undoClass} \n                onClick={undoCallback}\n            />\n            <input \n                type=\"button\" \n                id='redo-button' \n                value=\"⟳\" \n                className={redoClass} \n                onClick={redoCallback}\n            />\n            <input \n                type=\"button\" \n                id='close-button' \n                value=\"&#x2715;\" \n                className={closeClass} \n                onClick={closeCallback}\n            />\n        </div>\n        )\n    }\n}","import React from \"react\";\n\nexport default class SongCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isDragging: false,\n            draggedTo: false\n        }\n    }\n    handleDragStart = (event) => {\n        event.dataTransfer.setData(\"song\", event.target.id);\n        this.setState(prevState => ({\n            isDragging: true,\n            draggedTo: prevState.draggedTo\n        }));\n    }\n    handleDragOver = (event) => {\n        event.preventDefault();\n        this.setState(prevState => ({\n            isDragging: prevState.isDragging,\n            draggedTo: true\n        }));\n    }\n    handleDragEnter = (event) => {\n        event.preventDefault();\n        this.setState(prevState => ({\n            isDragging: prevState.isDragging,\n            draggedTo: true\n        }));\n    }\n    handleDragLeave = (event) => {\n        event.preventDefault();\n        this.setState(prevState => ({\n            isDragging: prevState.isDragging,\n            draggedTo: false\n        }));\n    }\n    handleDrop = (event) => {\n        event.preventDefault();\n        let target = event.target;\n        let targetId = target.id;\n        targetId = targetId.substring(target.id.indexOf(\"-\") + 1);\n        let sourceId = event.dataTransfer.getData(\"song\");\n        sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\n        \n        this.setState(prevState => ({\n            isDragging: false,\n            draggedTo: false\n        }));\n\n        // ASK THE MODEL TO MOVE THE DATA\n        this.props.moveCallback(sourceId, targetId);\n    }\n    handleDeleteSong = (event) => {\n        event.stopPropagation();\n        this.props.deleteSongCallback(this.props.keyNamePair);\n    }\n    handleEditSong = (event) => {\n        event.stopPropagation();\n        this.props.editSongCallback(this.props.keyNamePair);\n    }\n    getItemNum = () => {\n        return this.props.id.substring(\"playlist-song-\".length);\n    }\n    render() {\n        const { song } = this.props;\n        let link = \"https://youtube.com/watch?v=\" + song.youTubeId;\n        let num = this.getItemNum();\n        console.log(\"num: \" + num);\n        \n        return (\n            <div\n                id={'song-' + num}\n                className={\"list-card unselected-list-card\"}\n                onDragStart={this.handleDragStart}\n                onDragOver={this.handleDragOver}\n                onDragEnter={this.handleDragEnter}\n                onDragLeave={this.handleDragLeave}\n                onDrop={this.handleDrop}\n                onDoubleClick={this.handleEditSong}\n                draggable=\"true\"\n            >\n                {num}.\n                <a href = {link}> {song.title} by {song.artist}</a>\n                <button \n                    class=\"list-card-button\" \n                    id={\"delete-song-button\" + num} \n                    type = \"button\"\n                    onClick = {this.handleDeleteSong}\n                >\n                    X\n                </button>\n            </div>\n        )\n    }\n}","import SongCard from './SongCard.js';\nimport React from \"react\";\n\nexport default class PlaylistCards extends React.Component {\n    render() {\n        const { currentList, \n                moveSongCallback, deleteSongCallback, editSongCallback } = this.props;\n        if (currentList === null) {\n            return (\n                <div id=\"playlist-cards\"></div>\n            )\n        }\n        else {\n            return (\n                <div id=\"playlist-cards\">\n                    {\n                        currentList.songs.map((song, index) => (\n                            <SongCard\n                                id={'playlist-song-' + (index+1)}\n                                key={'playlist-song-' + (index+1)}\n                                song={song}\n                                moveCallback={moveSongCallback}\n                                deleteSongCallback={deleteSongCallback}\n                                editSongCallback={editSongCallback}\n                            />\n                        ))\n                    }\n                </div>\n            )\n        }\n    }\n}","import React from \"react\";\n\nexport default class SidebarHeading extends React.Component {\n    handleClick = (event) => {\n        const { createNewListCallback } = this.props;\n        createNewListCallback();\n    };\n    render() {\n        return (\n            <div id=\"sidebar-heading\">\n                <input \n                    type=\"button\" \n                    id=\"add-list-button\" \n                    className=\"toolbar-button\" \n                    onClick={this.handleClick}\n                    value=\"+\" />\n                Your Playlists\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nexport default class ListCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: this.props.keyNamePair.name,\n            editActive: false,\n        }\n    }\n    handleClick = (event) => {\n        if (event.detail === 1) {\n            this.handleLoadList(event);\n        }\n        else if (event.detail === 2) {\n            this.handleToggleEdit(event);\n        }\n    }\n    handleLoadList = (event) => {\n        let listKey = event.target.id;\n        if (listKey.startsWith(\"list-card-text-\")) {\n            listKey = listKey.substring(\"list-card-text-\".length);\n        }\n        this.props.loadListCallback(listKey);\n    }\n    handleDeleteList = (event) => {\n        event.stopPropagation();\n        this.props.deleteListCallback(this.props.keyNamePair);\n    }\n    handleToggleEdit = (event) => {\n        this.setState({\n            editActive: !this.state.editActive\n        });\n    }\n    handleUpdate = (event) => {\n        this.setState({ text: event.target.value });\n    }\n    handleKeyPress = (event) => {\n        if (event.code === \"Enter\") {\n            this.handleBlur();\n        }\n    }\n    handleBlur = () => {\n        let key = this.props.keyNamePair.key;\n        let textValue = this.state.text;\n        console.log(\"ListCard handleBlur: \" + textValue);\n        this.props.renameListCallback(key, textValue);\n        this.handleToggleEdit();\n    }\n\n    render() {\n        const { keyNamePair, selected } = this.props;\n\n        if (this.state.editActive) {\n            return (\n                <input\n                    id={\"list-\" + keyNamePair.name}\n                    className='list-card'\n                    type='text'\n                    onKeyPress={this.handleKeyPress}\n                    onBlur={this.handleBlur}\n                    onChange={this.handleUpdate}\n                    defaultValue={keyNamePair.name}\n                />)\n        }\n        else {\n\n            let selectClass = \"unselected-list-card\";\n            if (selected) {\n                selectClass = \"selected-list-card\";\n            }\n            return (\n                <div\n                    id={keyNamePair.key}\n                    key={keyNamePair.key}\n                    onClick={this.handleClick}\n                    className={'list-card ' + selectClass}>\n                    <span\n                        id={\"list-card-text-\" + keyNamePair.key}\n                        key={keyNamePair.key}\n                        className=\"list-card-text\">\n                        {keyNamePair.name}\n                    </span>\n                    <input\n                        type=\"button\"\n                        id={\"delete-list-\" + keyNamePair.key}\n                        className=\"list-card-button\"\n                        onClick={this.handleDeleteList}\n                        value={\"\\uD83D\\uDDD1\"} />\n                </div>\n            );\n        }\n    }\n}","import React from \"react\";\nimport ListCard from \"./ListCard\";\n\nexport default class SidebarList extends React.Component {\n    render() {\n        const { currentList,\n                keyNamePairs,\n                deleteListCallback, \n                loadListCallback,\n                renameListCallback} = this.props;\n        return (\n            <div id=\"sidebar-list\">\n                {\n                    keyNamePairs.map((pair) => (\n                        <ListCard\n                            key={pair.key}\n                            keyNamePair={pair}\n                            selected={(currentList !== null) && (currentList.key === pair.key)}\n                            deleteListCallback={deleteListCallback}\n                            loadListCallback={loadListCallback}\n                            renameListCallback={renameListCallback}\n                        />\n                    ))\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nexport default class Statusbar extends React.Component {\n    render() {\n        const {currentList} = this.props;\n        let name = \"\";\n        if (currentList) {\n            name = currentList.name;\n        }\n        return (\n            <div id=\"playlister-statusbar\">\n                {name}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\n\n// IMPORT DATA MANAGEMENT AND TRANSACTION STUFF\nimport DBManager from './db/DBManager';\nimport jsTPS from './common/jsTPS.js';\n\n// OUR TRANSACTIONS\nimport MoveSong_Transaction from './transactions/MoveSong_Transaction.js';\nimport AddSong_Transaction from './transactions/AddSong_Transaction.js';\nimport DeleteSong_Transaction from './transactions/DeleteSong_Transaction.js';\nimport EditSong_Transaction from './transactions/EditSong_Transaction.js';\n\n// THESE REACT COMPONENTS ARE MODALS\nimport DeleteListModal from './components/DeleteListModal.js';\nimport DeleteSongModal from './components/DeleteSongModal.js';\nimport EditSongModal from './components/EditSongModal.js';\n\n// THESE REACT COMPONENTS ARE IN OUR UI\nimport Banner from './components/Banner.js';\nimport EditToolbar from './components/EditToolbar.js';\nimport PlaylistCards from './components/PlaylistCards.js';\nimport SidebarHeading from './components/SidebarHeading.js';\nimport SidebarList from './components/SidebarList.js';\nimport Statusbar from './components/Statusbar.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // THIS IS OUR TRANSACTION PROCESSING SYSTEM\n        this.tps = new jsTPS();\n\n        // THIS WILL TALK TO LOCAL STORAGE\n        this.db = new DBManager();\n\n        // GET THE SESSION DATA FROM OUR DATA MANAGER\n        let loadedSessionData = this.db.queryGetSessionData();\n\n        // SETUP THE INITIAL STATE\n        this.state = {\n            listKeyPairMarkedForDeletion : null,\n            currentList : null,\n            sessionData : loadedSessionData\n        }\n    }\n    sortKeyNamePairsByName = (keyNamePairs) => {\n        keyNamePairs.sort((keyPair1, keyPair2) => {\n            // GET THE LISTS\n            return keyPair1.name.localeCompare(keyPair2.name);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF CREATING A NEW LIST\n    createNewList = () => {\n        // FIRST FIGURE OUT WHAT THE NEW LIST'S KEY AND NAME WILL BE\n        let newKey = this.state.sessionData.nextKey;\n        let newName = \"Untitled\" + newKey;\n\n        // MAKE THE NEW LIST\n        let newList = {\n            key: newKey,\n            name: newName,\n            songs: []\n        };\n\n        // MAKE THE KEY,NAME OBJECT SO WE CAN KEEP IT IN OUR\n        // SESSION DATA SO IT WILL BE IN OUR LIST OF LISTS\n        let newKeyNamePair = { \"key\": newKey, \"name\": newName };\n        let updatedPairs = [...this.state.sessionData.keyNamePairs, newKeyNamePair];\n        this.sortKeyNamePairsByName(updatedPairs);\n\n        // CHANGE THE APP STATE SO THAT THE CURRENT LIST IS\n        // THIS NEW LIST AND UPDATE THE SESSION DATA SO THAT THE\n        // NEXT LIST CAN BE MADE AS WELL. NOTE, THIS setState WILL\n        // FORCE A CALL TO render, BUT THIS UPDATE IS ASYNCHRONOUS,\n        // SO ANY AFTER EFFECTS THAT NEED TO USE THIS UPDATED STATE\n        // SHOULD BE DONE VIA ITS CALLBACK\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: newList,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey + 1,\n                counter: prevState.sessionData.counter + 1,\n                keyNamePairs: updatedPairs\n            }\n        }), () => {\n            // PUTTING THIS NEW LIST IN PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationCreateList(newList);\n\n            // SO IS STORING OUR SESSION DATA\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF DELETING A LIST.\n    deleteList = (key) => {\n        // IF IT IS THE CURRENT LIST, CHANGE THAT\n        let newCurrentList = null;\n        if (this.state.currentList) {\n            if (this.state.currentList.key !== key) {\n                // THIS JUST MEANS IT'S NOT THE CURRENT LIST BEING\n                // DELETED SO WE'LL KEEP THE CURRENT LIST AS IT IS\n                newCurrentList = this.state.currentList;\n            }\n        }\n\n        let keyIndex = this.state.sessionData.keyNamePairs.findIndex((keyNamePair) => {\n            return (keyNamePair.key === key);\n        });\n        let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\n        if (keyIndex >= 0)\n            newKeyNamePairs.splice(keyIndex, 1);\n\n        // AND FROM OUR APP STATE\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : null,\n            currentList: newCurrentList,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey,\n                counter: prevState.sessionData.counter - 1,\n                keyNamePairs: newKeyNamePairs\n            }\n        }), () => {\n            // DELETING THE LIST FROM PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationDeleteList(key);\n\n            // SO IS STORING OUR SESSION DATA\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    deleteMarkedList = () => {\n        this.deleteList(this.state.listKeyPairMarkedForDeletion.key);\n        this.hideDeleteListModal();\n    }\n    // THIS FUNCTION SPECIFICALLY DELETES THE CURRENT LIST\n    deleteCurrentList = () => {\n        if (this.state.currentList) {\n            this.deleteList(this.state.currentList.key);\n        }\n    }\n    renameList = (key, newName) => {\n        let newKeyNamePairs = [...this.state.sessionData.keyNamePairs];\n        // NOW GO THROUGH THE ARRAY AND FIND THE ONE TO RENAME\n        for (let i = 0; i < newKeyNamePairs.length; i++) {\n            let pair = newKeyNamePairs[i];\n            if (pair.key === key) {\n                pair.name = newName;\n            }\n        }\n        this.sortKeyNamePairsByName(newKeyNamePairs);\n\n        // WE MAY HAVE TO RENAME THE currentList\n        let currentList = this.state.currentList;\n        if (currentList.key === key) {\n            currentList.name = newName;\n        }\n\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : null,\n            sessionData: {\n                nextKey: prevState.sessionData.nextKey,\n                counter: prevState.sessionData.counter,\n                keyNamePairs: newKeyNamePairs\n            }\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            let list = this.db.queryGetList(key);\n            list.name = newName;\n            this.db.mutationUpdateList(list);\n            this.db.mutationUpdateSessionData(this.state.sessionData);\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF LOADING A LIST FOR EDITING\n    loadList = (key) => {\n        let newCurrentList = this.db.queryGetList(key);\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: newCurrentList,\n            sessionData: this.state.sessionData\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            this.tps.clearAllTransactions();\n        });\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF CLOSING THE CURRENT LIST\n    closeCurrentList = () => {\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList: null,\n            sessionData: this.state.sessionData\n        }), () => {\n            // AN AFTER EFFECT IS THAT WE NEED TO MAKE SURE\n            // THE TRANSACTION STACK IS CLEARED\n            this.tps.clearAllTransactions();\n        });\n    }\n    setStateWithUpdatedList(list) {\n        this.setState(prevState => ({\n            listKeyPairMarkedForDeletion : prevState.listKeyPairMarkedForDeletion,\n            currentList : list,\n            sessionData : this.state.sessionData\n        }), () => {\n            // UPDATING THE LIST IN PERMANENT STORAGE\n            // IS AN AFTER EFFECT\n            this.db.mutationUpdateList(this.state.currentList);\n        });\n    }\n    getPlaylistSize = () => {\n        return this.state.currentList.songs.length;\n    }\n    // THIS FUNCTION MOVES A SONG IN THE CURRENT LIST FROM\n    // start TO end AND ADJUSTS ALL OTHER ITEMS ACCORDINGLY\n    moveSong(start, end) {\n        let list = this.state.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n        this.setStateWithUpdatedList(list);\n    }\n    // THIS FUNCTION ADDS A MoveSong_Transaction TO THE TRANSACTION STACK\n    addMoveSongTransaction = (start, end) => {\n        let transaction = new MoveSong_Transaction(this, start, end);\n        this.tps.addTransaction(transaction);\n    }\n    //THIS FUNCTION ADDS A SONG TO THE CURRENT LIST\n    addSong = () => {\n        let list = this.state.currentList;\n        let songs = list.songs;\n        let tempSong = {title: \"Untitled\", artist: \"Unknown\", youTubeId: \"dQw4w9WgXcQ\"};\n        songs.push(tempSong);\n        this.setStateWithUpdatedList(list);\n    }\n    // THIS FUNCTION ADDS A AddSong_Transaction TO THE TRANSACTION STACK\n    addAddSongTransaction = () => {\n        let transaction = new AddSong_Transaction(this);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION DELETES A SONG FROM CURRENT LIST\n    deleteSong = (deleteIndex) => {\n        let list = this.state.currentList;\n        let songs = list.songs;\n        songs.splice(deleteIndex, 1);\n        this.setStateWithUpdatedList(list);\n    }\n    // THIS FUNCTION ADDS A DELETESONG TRANSACTION\n    addDeleteSongTransaction = (d, t, a, y) => {\n        let transaction = new DeleteSong_Transaction(this, d, t, a, y);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTIONS EDITS A SONG \n    editSong = (editIndex, newTitle, newArtist, newYoutubeId) =>{\n        let list = this.state.currentList;\n        let s = {title: newTitle, artist: newArtist, youTubeId: newYoutubeId};\n        list[editIndex] = s;\n        this.setStateWithUpdatedList(list);\n    }\n    // THIS FUNCTION ADDS A EDIT SONG TRANSACTION\n    addEditSongTransaction = (editIndex, t, a, y, oldT, oldA, oldY) => {\n        let transaction = new EditSong_Transaction(this, editIndex, t, a, y, oldT, oldA, oldY);\n        this.tps.addTransaction(transaction);\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING AN UNDO\n    undo = () => {\n        if (this.tps.hasTransactionToUndo()) {\n            this.tps.undoTransaction();\n\n            // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n            this.db.mutationUpdateList(this.state.currentList);\n        }\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING A REDO\n    redo = () => {\n        if (this.tps.hasTransactionToRedo()) {\n            this.tps.doTransaction();\n\n            // MAKE SURE THE LIST GETS PERMANENTLY UPDATED\n            this.db.mutationUpdateList(this.state.currentList);\n        }\n    }\n    markListForDeletion = (keyPair) => {\n        this.setState(prevState => ({\n            currentList: prevState.currentList,\n            listKeyPairMarkedForDeletion : keyPair,\n            sessionData: prevState.sessionData\n        }), () => {\n            // PROMPT THE USER\n            this.showDeleteListModal();\n        });\n    }\n    markSongForDeletion = (keyPair) => {\n        this.setState(prevState => ({\n            currentList: prevState.currentList,\n            listKeyPairMarkedForDeletion : keyPair,\n            sessionData: prevState.sessionData\n        }), () => {\n            this.showDeleteSongModal();\n        });\n    }\n    markSongForEdit = (keyPair) => {\n        this.setState(prevState => ({\n            currentList: prevState.currentList,\n            listKeyPairMarkedForDeletion : keyPair,\n            sessionData: prevState.sessionData\n        }), () =>{\n            this.showEditSongModal();\n        })\n    }\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\n    // TO SEE IF THEY REALLY WANT TO DELETE THE LIST\n    showDeleteListModal() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    hideDeleteListModal() {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    // USED FOR PROMPTING USER TO SEE IF THEY WANT TO EDIT LIST\n    showEditSongModal(){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // HIDES MODAL\n    hideEditSongModal() {\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    showDeleteSongModal(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    hideDeleteSongModal(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    render() {\n        let canAddSong = this.state.currentList !== null;\n        let canUndo = this.tps.hasTransactionToUndo();\n        let canRedo = this.tps.hasTransactionToRedo();\n        let canClose = this.state.currentList !== null;\n        return (\n            <div id=\"root\">\n                <Banner />\n                <SidebarHeading\n                    createNewListCallback={this.createNewList}\n                />\n                <SidebarList\n                    currentList={this.state.currentList}\n                    keyNamePairs={this.state.sessionData.keyNamePairs}\n                    deleteListCallback={this.markListForDeletion}\n                    loadListCallback={this.loadList}\n                    renameListCallback={this.renameList}\n                />\n                <EditToolbar\n                    canAddSong={canAddSong}\n                    canUndo={canUndo}\n                    canRedo={canRedo}\n                    canClose={canClose}\n                    addCallback={this.addAddSongTransaction} \n                    undoCallback={this.undo}\n                    redoCallback={this.redo}\n                    closeCallback={this.closeCurrentList}\n                />\n                <PlaylistCards\n                    currentList={this.state.currentList}\n                    moveSongCallback={this.addMoveSongTransaction}\n                    editSongCallback={this.markSongForEdit}\n                    deleteSongCallback={this.markSongForDeletion}\n                />\n                <Statusbar \n                    currentList={this.state.currentList} />\n                <DeleteListModal\n                    listKeyPair={this.state.listKeyPairMarkedForDeletion}\n                    hideDeleteListModalCallback={this.hideDeleteListModal}\n                    deleteListCallback={this.deleteMarkedList}\n                />\n                <DeleteSongModal\n                    listKeyPair={this.state.listKeyPairMarkedForDeletion}\n                    hideDeleteSongModalCallback={this.hideDeleteSongModal}\n                    deleteSongCallback={this.addDeleteSongTransaction}\n                />\n                <EditSongModal\n                    listKeyPair={this.state.listKeyPairMarkedForDeletion}\n                    hideEditSongModalCallback={this.hideEditSongModal}\n                    editSongCallback={this.addEditSongTransaction}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// THIS FUNCTION TESTS TO SEE IF THIS APP HAS\n// DATA IN LOCAL STORAGE. IF IT DOES, TRUE IS\n// RETURNED, ELSE FALSE \nfunction isInLocalStorage() {\n  return localStorage.getItem(\"playlister-data\") != null;\n}\n\nfunction loadListsFromJSON(jsonFilePath) {\n  let xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = function () {\n    if (this.readyState === 4 && this.status === 200) {\n      let text = this.responseText;\n      let lists = JSON.parse(text).playlists;\n\n      // GO THROUGH THE LISTS AND SAVE EACH USING THEIR KEY\n      for (let i = 0; i < lists.length; i++) {\n        let listData = lists[i];\n        let listString = JSON.stringify(listData);\n        localStorage.setItem(\"playlister-list-\" + listData.key, listString);\n      }\n\n      // THIS IS OUR SESSION DATA THAT WE'LL NEED TO\n      // HELP US DEAL WITH THE LISTS\n      localStorage.setItem(\"playlister-data\", JSON.stringify(\n        {\n          \"nextKey\" : 3,\n          \"counter\" : 3,\n          \"keyNamePairs\" : [\n            {\"key\": \"0\", \"name\": \"Space Rock\"},\n            {\"key\": \"1\", \"name\": \"Proggy Pop\"}, \n            {\"key\": \"2\", \"name\": \"Don't be Rude\"}\n          ]\n        }));\n      launch();\n    }\n  }\n  xmlhttp.open(\"GET\", jsonFilePath, true);\n  xmlhttp.send();\n}\n\nfunction launch() {\n  // IF NO DATA IS IN LOCAL STORAGE THEN LOAD ALL THE TEST\n  // DATA FROM THE JSON FILE AND PUT IT THERE\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nif (!isInLocalStorage()) {\n  loadListsFromJSON(\"./data/default_lists.json\");\n}\nelse {\n  launch();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}